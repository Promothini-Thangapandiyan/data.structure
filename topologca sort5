#include <stdio.h>
#include <stdlib.h>

#define MAX_N 500

// Graph representation
int graph[MAX_N][MAX_N];
int graph_size[MAX_N];  // Number of people richer than i
int memo[MAX_N];  // Memoization array to store the quietest person for each person
int quiet[MAX_N];  // Quietness array

// DFS function to find the quietest person
int dfs(int person, int n) {
    if (memo[person] != -1) {
        return memo[person];  // Return the memoized result
    }
    
    // Initially, the quietest person is the person themselves
    int quietest_person = person;
    
    // Explore all people who are richer than the current person
    for (int i = 0; i < graph_size[person]; i++) {
        int richer_person = graph[person][i];
        int candidate = dfs(richer_person, n);  // Recursively find the quietest among richer people
        
        // Update the quietest person if the candidate is quieter
        if (quiet[candidate] < quiet[quietest_person]) {
            quietest_person = candidate;
        }
    }
    
    // Memoize the result
    memo[person] = quietest_person;
    return memo[person];
}

int* loudAndRich(int** richer, int richerSize, int* richerColSize, int* quiet, int n, int* returnSize) {
    // Initialize the graph
    for (int i = 0; i < n; i++) {
        graph_size[i] = 0;
    }
    
    // Build the graph from the richer relations
    for (int i = 0; i < richerSize; i++) {
        int a = richer[i][0];
        int b = richer[i][1];
        graph[b][graph_size[b]++] = a;  // b -> a (b is richer than a)
    }
    
    // Initialize memo array to -1 (unvisited)
    for (int i = 0; i < n; i++) {
        memo[i] = -1;
    }

    // Initialize the quietness array
    for (int i = 0; i < n; i++) {
        quiet[i] = quiet[i];
    }
    
    // Result array
    int* result = (int*)malloc(sizeof(int) * n);
    
    // Run DFS for each person to find the quietest among richer people
    for (int i = 0; i < n; i++) {
        result[i] = dfs(i, n);
    }
    
    // Set return size
    *returnSize = n;
    
    return result;
}

// Helper function to print the result
void printArray(int* arr, int size) {
    for (int i = 0; i < size; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");
}

int main() {
    // Example 1
    int richer1[][2] = {{1,0},{2,1},{3,1},{3,7},{4,3},{5,3},{6,3}};
    int richerSize1 = sizeof(richer1) / sizeof(richer1[0]);
    int richerColSize1[] = {2};  // Each sub-array has 2 elements
    int quiet1[] = {3,2,5,4,6,1,7,0};
    int n1 = 8;
    
    int* returnSize1 = (int*)malloc(sizeof(int));
    int* result1 = loudAndRich((int**)richer1, richerSize1, richerColSize1, quiet1, n1, returnSize1);
    printArray(result1, *returnSize1);
    
    // Free allocated memory
    free(returnSize1);
    free(result1);
    
    return 0;
}
